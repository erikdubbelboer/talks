Tips and Tricks for High performance Go
20 Jun 2019

Erik Dubbelboer
Senior Developer, poki.com
Co-founder/CTO, atomx.com
Maintainer, github.com/valyala/fasthttp
erik@dubbelboer.com
https://github.com/erikdubbelboer




* Topics

- Benchmarking in Go
- Unrolling loops
- Removing bounds checks
- Escape analysis
- Why is garbage bad?
- `sync.Pool`
- `string`/`[]byte` conversions
- Struct packing




* Benchmarking in Go

 $ go test -bench . -benchmem


* Benchmarking in Go

	$ go test -bench . -benchmem

 // slice_test.go
 func BenchmarkNormal(b *testing.B) {
 	for i := 0; i < b.N; i++ {
 		// Code you want to benchmark here...
 		// This is counted as one "op".
 	}
 }


* Benchmarking in Go

.code preallocate-slices/test_test.go

- slices grow [[https://github.com/golang/go/blob/323212b9e6edd55e99d973d00d2132995762c858/src/runtime/slice.go#L96-L114][exponentially]]_ish_


* Benchmarking in Go

.code preallocate-slices/test_test.go

 $ go test -bench . -benchmem
 BenchmarkNormal-16          50000    33027 ns/op    386297 B/op    20 allocs/op
 BenchmarkPreallocate-16    200000     8219 ns/op     81920 B/op     1 allocs/op


* Benchmarking in Go

.code preallocate-slices/test_test.go

.code slice.txt




* Unrolling loops

.code unroll-loop/test.go /^func sumFloat64/,/^}/


* Unrolling loops

.code unroll-loop/test.go /^func sumFloat64Unrolled/,/^}/


* Unrolling loops

 $ go test -bench . -benchmem
 BenchmarkSum-16                5000000        234   ns/op           0 B/op           0 allocs/op
 BenchmarkSumUnrolled-16        20000000        96.4 ns/op           0 B/op           0 allocs/op




* Removing bounds checks

	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]
	a4 += s[i+3]

- Bounds check on every line!


* Removing bounds checks

	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]
	a4 += s[i+3]

Reverse order?

	a4 += s[i+3]
	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]


* Removing bounds checks

	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]
	a4 += s[i+3]

Move the bounds check up!

	_ = s[i+3]
	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]
	a4 += s[i+3]

Real life example in [[https://github.com/golang/go/blob/7a4d02387fa16cd2a88c30357346e5cf0ae282b1/src/encoding/binary/binary.go#L76][encoding/binary.LittleEndian.Uint64([]byte) uint64]]


* Removing bounds checks

	a1 += s[i]
	a2 += s[i+1]
	a3 += s[i+2]
	a4 += s[i+3]

Remove bounds checks completely!

	ss := (*[4]float64)(unsafe.Pointer(&s[i]))
	a1 += ss[0]
	a2 += ss[1]
	a3 += ss[2]
	a4 += ss[3]


* Removing bounds checks

 $ go test -bench . -benchmem
 BenchmarkSum-16                       5000000        234 ns/op       0 B/op     0 allocs/op
 BenchmarkSumUnrolled-16               20000000      96.4 ns/op       0 B/op     0 allocs/op
 BenchmarkSumUnrolledNoBounds-16       20000000      67.8 ns/op       0 B/op     0 allocs/op




* Escape analysis

.code -numbers escape-analysis/heap.go

	$ go run -gcflags '-m -m -l' heap.go
	./heap.go:3:11: doit x does not escape
	./heap.go:9:7: main &y does not escape


* Escape analysis

.code -numbers escape-analysis/stack.go

	$ go run -gcflags '-m -m -l' stack.go
	./stack.go:5:11: leaking param: x
	./stack.go:5:11: 	from g (assigned to top level variable) at ./stack.go:6:4
	./stack.go:11:7: &y escapes to heap
	./stack.go:11:7: 	from &y (passed to call[argument escapes]) at ./stack.go:11:6
	./stack.go:10:2: moved to heap: y




* Why is garbage bad?

.code heap-stack-garbage/test_test.go


* Why is garbage bad?

.code heap-stack-garbage/test_test.go

	$ GOGC=1 go test -bench . -benchmem
	BenchmarkHeap-16          2000000          6287   ns/op         801 B/op         100 allocs/op
	BenchmarkStack-16       500000000            30.7 ns/op           0 B/op           0 allocs/op




* sync.Pool

.code pool.go


* sync.Pool

.code pool/test_test.go /^func BenchmarkNoPool/,/^}/


* sync.Pool

.code pool/test_test.go /^func BenchmarkPool/,/^}/


* sync.Pool

 $ GOGC=1 go test -bench . -benchmem
 BenchmarkNoPool-16    	  200000	      7375 ns/op	   38516 B/op	       9 allocs/op
 BenchmarkPool-16      	 1000000	      1047 ns/op	       0 B/op	       0 allocs/op

- Even faster in 1.13 ([[https://github.com/golang/go/issues/22950][no more full clear on GC]])




* string/[]byte conversions

 type SliceHeader struct {
         Data uintptr
         Len  int
         Cap  int
 }

	type StringHeader struct {
	        Data uintptr
	        Len  int
	}

* string/[]byte conversions

.code b2s/test_test.go /^func BenchmarkSlow/,/^}/


* string/[]byte conversions

.code b2s/test_test.go /^func b2s/,/^}/

.code b2s/test_test.go /^func BenchmarkFast/,/^}/


* string/[]byte conversions

.code b2s/test_test.go /^func b2s/,/^}/

.code b2s/test_test.go /^func BenchmarkFast/,/^}/

	$ GOGC=1 go test -bench . -benchmem
	BenchmarkSlow-16        30000000            40.3  ns/op           4 B/op           1 allocs/op
	BenchmarkFast-16        300000000            4.83 ns/op           0 B/op           0 allocs/op



* string/[]byte conversions

.code s2b/test_test.go /^func BenchmarkSlow/,/^}/


* string/[]byte conversions

.code s2b/test_test.go /^func s2b/,/^}/

.code s2b/test_test.go /^func BenchmarkFast/,/^}/


* string/[]byte conversions

.code s2b/test_test.go /^func s2b/,/^}/

.code s2b/test_test.go /^func BenchmarkFast/,/^}/

	$ GOGC=1 go test -bench . -benchmem
	BenchmarkSlow-16        20000000           102    ns/op          16 B/op           1 allocs/op
	BenchmarkFast-16        500000000            3.67 ns/op           0 B/op           0 allocs/op




* Struct packing

.code map/test_test.go /^type TooBig/,/^}/


* Struct packing

.code map/test_test.go /^type TooBig/,/^}/

.code map/test_test.go /^type JustRight/,/^}/


* Struct packing

.code map/test_test.go /^func BenchmarkTooBig/,/^}/
.code map/test_test.go /^func BenchmarkJustRight/,/^}/


* Struct packing

.code map/test_test.go /^func BenchmarkTooBig/,/^}/
.code map/test_test.go /^func BenchmarkJustRight/,/^}/

	$ go test -bench . -benchmem
	BenchmarkTooBig-16                    5000000       362 ns/op       212 B/op       1 allocs/op
	BenchmarkJustRight-16                 5000000       444 ns/op       529 B/op       0 allocs/op


* Struct packing

.code map/test_test.go /^func BenchmarkTooBig/,/^}/
.code map/test_test.go /^func BenchmarkJustRightPrealloc/,/^}/

	$ go test -bench . -benchmem
	BenchmarkTooBig-16                    5000000       362 ns/op       212 B/op       1 allocs/op
	BenchmarkJustRight-16                 5000000       444 ns/op       529 B/op       0 allocs/op
	BenchmarkJustRightPrealloc-16        10000000       340 ns/op       246 B/op       0 allocs/op
